# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hASWXhNyYtJRIY53e7AFes96utntneLK
"""

#code snippet1
# Import required libraries
import streamlit as st
import pandas as pd
import pickle

#code snippet2
# Load the trained model
with open("ebook_subscription_model.pkl", "rb") as f:
    model = pickle.load(f)

#code snippet3
# Title and introduction
st.title("ðŸ“š E-Book Subscription Prediction")
st.write("Enter customer details to predict subscription likelihood.")

#code snippet4
# User inputs - categorical features
education = st.selectbox("Education Level", ["High School", "Bachelors", "Masters", "Doctorate", "Other"])
occupation = st.selectbox("Occupation", ["Professional", "Management", "Clerical", "Manual", "Other"])
gender = st.selectbox("Gender", ["Male", "Female", "Other"])
marital = st.selectbox("Marital Status", ["Single", "Married", "Divorced", "Widowed"])
home_owner = st.radio("Home Owner Status (0 = No, 1 = Yes)", [0, 1])

#code snippet5
# User inputs - numerical features
cars = st.number_input("Number of Cars Owned", min_value=0, max_value=5, value=1)
children_home = st.number_input("Number of Children At Home", min_value=0, max_value=10, value=0)
children_total = st.number_input("Total Number of Children", min_value=0, max_value=10, value=0)
income = st.number_input("Annual Income ($)", min_value=0, max_value=500000, value=50000)
spend = st.number_input("Avg Monthly Spend ($)", min_value=0, max_value=5000, value=200)
age = st.number_input("Age", min_value=18, max_value=100, value=30)

#code snippet6
# User inputs - location features
city = st.text_input("City", "Dallas")
zipcode = st.text_input("ZipCode", "75287")
state = st.text_input("State", "TX")

#code snippet7
# Build dataframe with user inputs
input_data = pd.DataFrame({
    'Education Level': [education],
    'Occupation': [occupation],
    'Gender': [gender],
    'Marital Status': [marital],
    'Home Owner Status': [home_owner],
    'Number of Cars Owned': [cars],
    'Number of Children At Home': [children_home],
    'Total Number of Children': [children_total],
    'Annual Income': [income],
    'Avg Monthly Spend': [spend],
    'City': [city],
    'ZipCode': [zipcode],
    'State': [state],
    'Age': [age]
})

#code snippet8
# Prediction button
if st.button("Predict"):
    try:
        prediction = model.predict(input_data)
        st.subheader(f"Result: {prediction[0]}")

        # If model supports probabilities
        if hasattr(model, "predict_proba"):
            proba = model.predict_proba(input_data)[0][1]
            st.write(f"Probability of subscription: {proba:.2f}")
    except Exception as e:
        st.error(f"An error occurred while predicting: {e}")